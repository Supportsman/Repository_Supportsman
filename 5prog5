#include <SFML/Graphics.hpp>
#include <vector>
#include <cmath>
#include <iostream>

const float PI = 3.14159265358979323846;

class Graph {
private:
    std::vector<std::pair<int, int>> edges;
    int vertexCount;

public:
    Graph(int vertexCount) : vertexCount(vertexCount) {}

    void addEdge(int u, int v) {
        edges.push_back({ u, v });
    }

    const std::vector<std::pair<int, int>>& getEdges() const {
        return edges;
    }

    int getVertexCount() const {
        return vertexCount;
    }
};

void drawArrow(sf::RenderWindow& window, sf::Vector2f start, sf::Vector2f end) {
    sf::VertexArray line(sf::Lines, 2);
    line[0].position = start;
    line[0].color = sf::Color::Yellow;
    line[1].position = end;
    line[1].color = sf::Color::Magenta;
    window.draw(line);

    sf::Vector2f direction = end - start;
    float length = std::sqrt(direction.x * direction.x + direction.y * direction.y);
    direction /= length;

    sf::Vector2f arrowPoint1 = end - direction * 10.0f + sf::Vector2f(-direction.y, direction.x) * 5.0f;
    sf::Vector2f arrowPoint2 = end - direction * 10.0f - sf::Vector2f(-direction.y, direction.x) * 5.0f;

    sf::VertexArray arrow(sf::Triangles, 3);
    arrow[0].position = end;
    arrow[0].color = sf::Color::Yellow;
    arrow[1].position = arrowPoint1;
    arrow[1].color = sf::Color::Yellow;
    arrow[2].position = arrowPoint2;
    arrow[2].color = sf::Color::Yellow;
    window.draw(arrow);
}

void visualizeGraph(const Graph& graph, sf::RenderWindow& window, sf::Font& font) {
    int vertexCount = graph.getVertexCount();
    const auto& edges = graph.getEdges();

    std::vector<sf::Vector2f> positions(vertexCount);
    float radius = 200.0f;
    sf::Vector2f center(400.0f, 300.0f);
    for (int i = 0; i < vertexCount; ++i) {
        float angle = 2 * PI * i / vertexCount;
        positions[i] = center + sf::Vector2f(std::cos(angle) * radius, std::sin(angle) * radius);
    }

    for (int i = 0; i < vertexCount; ++i) {
        sf::CircleShape vertex(10.0f);
        vertex.setFillColor(sf::Color::Magenta);
        vertex.setPosition(positions[i] - sf::Vector2f(10.0f, 10.0f));
        window.draw(vertex);

        sf::Text label(std::to_string(i + 1), font, 15);
        label.setFillColor(sf::Color::Yellow);
        label.setPosition(positions[i] + sf::Vector2f(15.0f, 15.0f));
        window.draw(label);
    }

    for (const auto& edge : edges) {
        int u = edge.first - 1;
        int v = edge.second - 1;

        if (u < 0 || v < 0 || u >= vertexCount || v >= vertexCount) {
            std::cerr << "Invalid edge: " << edge.first << " -> " << edge.second << "\n";
            continue;
        }

        if (edge.first != edge.second) {
            drawArrow(window, positions[u], positions[v]);
        }
    }
}

int main() {
    Graph graph(6);
    graph.addEdge(1, 2);
    graph.addEdge(2, 5);
    graph.addEdge(1, 3);

    graph.addEdge(3, 4);
    graph.addEdge(3, 5);
    graph.addEdge(5, 6);
    graph.addEdge(6, 5);
    graph.addEdge(6, 3);



    sf::RenderWindow window(sf::VideoMode(800, 600), "Graph SFML Visual");

    sf::Font font;
    if (!font.loadFromFile("C:/Build/prog 2sem 5 lab/arial.ttf")) {
        std::cerr << "Failed to load font\n";
        return -1;
    }

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
        }

        window.clear();
        visualizeGraph(graph, window, font);
        window.display();
    }

    return 0;
}
