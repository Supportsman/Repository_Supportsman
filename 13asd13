#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <codecvt>
#include <locale>

using namespace std;

class HashTable {
private:
    int tableSize;// Размер таблицы
    vector<wstring> hashTable;// Вектор для хранения значений

    // Функция хэширования для строки
    int hashFunction(const wstring& key) {
        int hash = 0;// индекс
        for (wchar_t ch : key) { //проходим через каждый символ строки key
            hash = (hash * 31 + ch) % tableSize;// вычисляем индекс для заданного слова
        }
        return hash; // Возврат сгенерированного индекса
    }

public:
    HashTable(int size) : tableSize(size), hashTable(size) {}

    //добавление в таблицу
    void insert(const wstring& value) {
        int index = hashFunction(value);// вычисляем индекс для заданного
        while (!hashTable[index].empty()) {
            index = (index + 1) % tableSize;
        }
        hashTable[index] = value;
    }

    //Метод записи в файл
    void writeToFile(const string& filename) {
        wofstream file(filename);
        file.imbue(locale(file.getloc(), new codecvt_utf8<wchar_t>));
        if (!file.is_open()) {
            wcerr << L"Не удалось открыть файл для записи!" << endl;
            return;
        }

        for (size_t i = 0; i < hashTable.size(); ++i) {
            if (!hashTable[i].empty()) {
                file << L"Индекс " << i << L": " << hashTable[i] << endl;
            }
        }

        file.close();
    }
};

int main() {
    wifstream inputFile("input.txt");
    inputFile.imbue(locale(inputFile.getloc(), new codecvt_utf8<wchar_t>));
    if (!inputFile.is_open()) {
        wcerr << L"Не удалось открыть входной файл." << endl;
        return 1;
    }

    const unsigned int TABLE_SIZE = 41;
    HashTable hashTable(TABLE_SIZE);

    wstring word;
    while (inputFile >> word) {
        hashTable.insert(word);
    }
    inputFile.close();

    hashTable.writeToFile("output.txt");

    return 0;
}
