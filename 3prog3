// Очередь изнутри - видим только первого - хед


#include <iostream>
#include <string>


// Элемент односвязного списка
#pragma pack(1)
struct Node {
public:
    std::string data;
    Node* next; // Указатель на следующий элемент

    Node(const std::string& value) : data(value), next(nullptr) {}
};
#pragma pack()
// Очередь
class Queue {
private:
    Node* head; // первый элемент
    //Node* tail; // последний

public:
    Queue() : head(nullptr){}
    
    ~Queue() { // Удалить все элементы очереди пока хед не нульптр
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    // Метод добавления элемента в конец очереди
    void add(const std::string& value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = newNode;
        }
        else {
            Node* current = head;
            while (current->next) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    // Метод извлечения элемента из начала очереди                        добавить просмотр первого эл
    std::string deq() {
        
        smotrFirstEl();

        std::string value = head->data;
        Node* temp = head;
        head = head->next;
        delete temp;
        
        return value;
    }

    std::string smotrFirstEl() const {

        if (!head) {
            std::cout << "Очередь пуста!" << std::endl;
            return "Очередь пуста!";
        }
        return head->data;
    }

    // Метод поиска элемента
    bool find(const std::string& value) const {
        Node* current = head;
        while (current) {
            if (current->data == value) {
                return true;
            }
            current = current->next;
        }
        return false;
    }

    // Метод вычисления веса элемента
    int weight(const std::string& value) const {
        Node* current = head;
        int index = 0;
        while (current) {
            if (current->data == value) {
                return index + 1; // Вес с 1
            }
            current = current->next;
            index++;
        }
        return -1; // Элемент не найден
    }

    // Перегрузка +
    Queue operator+(const Queue& other) const {
        Queue result;
        Node* current = head;
        while (current) {
            result.add(current->data);
            current = current->next;
        }
        current = other.head;
        while (current) {
            result.add(current->data);
            current = current->next;
        }
        return result;
    }

    // Перегрузка *
    Queue operator*(const Queue& other) const {
        Queue result;
        Node* current1 = head;
        Node* current2 = other.head;
        while (current1 || current2) {
            if (current1) {
                result.add(current1->data);
                current1 = current1->next;
            }
            if (current2) {
                result.add(current2->data);
                current2 = current2->next;
            }
        }
        return result;
    }

    // Разворот очереди
    Queue operator-() const {
        Queue result;
        Node* current = head;
        while (current) {
            Node* newNode = new Node(current->data);
            newNode->next = result.head;
            result.head = newNode;
            current = current->next;
        }
        return result;
    }

    // Удалить ждуна
    void DolgoZdat(const std::string& value) {
        Node* current = head;
        Node* previous = nullptr;

        while (current) {
            if (current->data == value) {
                if (previous) {
                    previous->next = current->next;
                }
                else {
                    head = current->next;
                }
                delete current;
                return; 
            }
            previous = current;
            current = current->next;
        }
    }


    void print() const {
        Node* current = head;
        while (current) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
 
};

int main() {
    setlocale(LC_ALL, "Russian");
    Queue q1;
    q1.add("a1");
    q1.add("a2");
    q1.add("a3");
    std::cout << "Очередь 1: ";
    q1.print();

    Queue q2;
    q2.add("b1");
    q2.add("b2");
    std::cout << "Очередь 2: ";
    q2.print();

    Queue q3 = q1 + q2;
    std::cout << "Сложение очередей: ";
    q3.print();

    Queue q4 = q1 * q2;
    std::cout << "Умножение очередей: ";
    q4.print();

    Queue q5 = -q1;
    std::cout << "Разворот очередей: ";
    q5.print();

    std::cout << "Поиск a2: " << q1.find("a2") << std::endl;

    std::cout << "Вес a2: " << q1.weight("a2") << std::endl;

    q1.DolgoZdat("a2");
    std::cout << "Очередь после удаления a2: ";
    q1.print();

    std::cout << "Извлечения элемента из начала очереди 1: " << q1.deq() << std::endl;


    Queue q10;
    /*q1.add("a1");
    q1.DolgoZdat("a1");*/
    q10.smotrFirstEl();

    return 0;
}
