#include <iostream>
#include <string>

class Stack {
private:
    struct Node {
        std::string data;
        Node* next;
        Node* previous;

        Node(const std::string& data, Node* next = nullptr, Node* previous = nullptr)
            : data(data), next(next), previous(previous) {}
        ~Node() {
            next = nullptr;
            previous = nullptr;
        }
    };

    Node* top; // указатель на вершину стека
    size_t size; // количество элементов

public:
    Stack() : top(nullptr), size(0) {}
    ~Stack() {
        while (top) {
            Node* temp = top;
            top = top->next;
            delete temp;
        }
    }

    // Добавление элемента в начало
    void push(const std::string& value) {
        Node* newNode = new Node(value, top);
        if (top) {
            top->previous = newNode;
        }
        top = newNode;
        size++;
    }

    // Просмотр и извлечение элемента из начала
    std::string pop() {
        if (isEmpty()) {
            throw std::out_of_range("Стак пуст");
        }
        Node* temp = top;
        std::string value = top->data;
        top = top->next;
        if (top) {
            top->previous = nullptr;
        }
        delete temp;
        size--;
        return value;
    }

    // Проверка на наличие элемента
    bool find(const std::string& value) const {
        Node* current = top;
        while (current) {
            if (current->data == value) {
                return true;
            }
            current = current->next;
        }
        return false;
    }

    // Вычисление веса элемента (номер в стеке или -1)
    int weight(const std::string& value) const {
        Node* current = top;
        int position = 1;
        while (current) {
            if (current->data == value) {
                return position;
            }
            current = current->next;
            position++;
        }
        return -1;
    }

    // Глубина стека
    size_t depth() const {
        return size;
    }

    Stack operator+(const Stack& other) const {
        Stack result = *this; 
        Node* current = other.top;
        while (current) {
            result.push(current->data);
            current = current->next;
        }
        return result;
    }

    Stack operator*(const Stack& other) const {
        Stack result;
        Node* currentA = this->top;
        Node* currentB = other.top;

        // Добавляем элементы поочередно из обоих стеков
        while (currentA || currentB) {
            if (currentA) {
                result.push(currentA->data);
                currentA = currentA->next;
            }
            if (currentB) {
                result.push(currentB->data);
                currentB = currentB->next;
            }
        }
        return result;
    }

    // Переворот
    Stack operator-() const {
        Stack result;
        Node* current = top;
        while (current) {
            result.push(current->data);
            current = current->next;
        }
        return result;
    }

    // Удаление элемента с весом i
    void dzenga(size_t index) {
        if (index < 1 || index > size) {
            throw std::out_of_range("Неверный индекс");
        }

        Node* current = top;
        for (size_t i = 1; i < index; ++i) {
            current = current->next;
        }
        if (current->previous) {
            current->previous->next = current->next;
        }
        else {
            top = current->next;
        }
        if (current->next) {
            current->next->previous = current->previous;
        }
        delete current;
        size--;
    }

    bool isEmpty() const {
        return size == 0;
    }

    void print() const {
        Node* current = top;
        while (current) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    setlocale(LC_ALL, "");
    Stack stack1;
    stack1.push("a");
    stack1.push("b");
    stack1.push("c");
    std::cout << "Stack 1: ";
    stack1.print();

    Stack stack2;
    stack2.push("1");
    stack2.push("2");
    stack2.push("3");
    int a = stack2.depth();
    std::cout << "Количество элементов в Stack 2: " << a << std::endl;
    std::cout << "Stack 2: ";
    stack2.print();
    std::cout << std::endl;
    stack2.dzenga(2);
    std::cout << "Stack 2 после удаления элемента: ";
    stack2.print();
    std::cout << "Stack 3 (перемножение 1 и 2) : ";
    Stack stack3 = stack1 * stack2;
    stack3.print();

}
