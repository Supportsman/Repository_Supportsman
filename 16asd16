// лаба 16.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <stack>
#include <string>
#include <sstream>

struct TreeNode {
    int value;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : value(x), left(NULL), right(NULL) {}
};

// Функция для создания дерева
TreeNode* parseTree(std::istringstream& ss) {
    if (ss.peek() == ' ') {
        ss.get(); // Пропустить пробел
    }

    if (ss.peek() == ')' or  ss.peek() == ',' or  ss.peek() == EOF) {
        return nullptr;
    }

    int value;
    ss >> value;
    TreeNode* node = new TreeNode(value);

    if (ss.peek() == ' ') {
        ss.get(); // Пропускать пробелы
    }

    if (ss.peek() == '(') {
        ss.get(); // Пропустить '('
        node->left = parseTree(ss);

        if (ss.peek() == ',') {
            ss.get(); // Пропустить ','
            node->right = parseTree(ss);
        }
        ss.get(); // Пропустить ')'
    }

    return node;
}

// Прямой обход с использованием стека
std::string preorderTraversal(TreeNode* root) {
    if (!root) return "";

    std::stack<TreeNode*> stack;
    stack.push(root); // Добавляем
    std::string result;

    while (!stack.empty()) {
        TreeNode* node = stack.top(); // Достаем
        stack.pop(); // Удаляем
        result += std::to_string(node->value) + " "; // Добавляем в результат

        // Сначала помещаем правый узел, чтобы левый узел был обработан первым
        if (node->right) {
            stack.push(node->right);
        }
        if (node->left) {
            stack.push(node->left);
        }
    }

    return result;
}

int main() {
    setlocale(0, "RU");

    std::string treeStr = "8 (3 (1, 6 (4, 7)), 10 (, 14 (13,)))";
    std::istringstream ss(treeStr);
    TreeNode* root = parseTree(ss);

    std::string result = preorderTraversal(root);
    std::cout << "Результат обхода: " << result << std::endl;

    return 0;
}
