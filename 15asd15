#include <iostream>
#include <string>
#include <sstream>

struct TreeNode {
    int value;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : value(x), left(nullptr), right(nullptr) {}
};

// Функция для создания дерева
TreeNode* parseTree(std::istringstream& ss) {
    if (ss.peek() == ' ') {
        ss.get(); // Пропустить пробел
    }

    // Если втречается конец строки или , это значит, что узел отсутстсвует 
    if (ss.peek() == ')' or  ss.peek() == ',' or ss.peek() == EOF) {
        return nullptr;
    }

    int value;
    ss >> value; // считываем значение
    TreeNode* node = new TreeNode(value);

    if (ss.peek() == ' ') {
        ss.get(); // Пропускать пробелы
    }

    if (ss.peek() == '(') {
        ss.get(); // Пропустить '('
        node->left = parseTree(ss);

        if (ss.peek() == ',') {
            ss.get(); // Пропустить ','
            node->right = parseTree(ss);
        }
        ss.get(); // Пропустить ')'
    }

    return node;
}

// Прямой обход
// Корень, левый узел, правый узел
void preorderTraversal(TreeNode* node) {
    if (!node) return;
    std::cout << node->value << " ";
    preorderTraversal(node->left);
    preorderTraversal(node->right);
}

// Центральный обход
// Левый узел, корень, правый узел
void inorderTraversal(TreeNode* node) {
    if (!node) return;
    inorderTraversal(node->left);
    std::cout << node->value << " ";
    inorderTraversal(node->right);
}

// Концевой обход
// Левый узел, правый узел, корень
void postorderTraversal(TreeNode* node) {
    if (!node) return;
    postorderTraversal(node->left);
    postorderTraversal(node->right);
    std::cout << node->value << " ";
}

int main() {
    setlocale(0, "RU");
    std::string treeStr = "8 (3 (1, 6 (4, 7)), 10 (, 14 (13,)))";
    std::istringstream ss(treeStr);
    TreeNode* root = parseTree(ss);

    std::cout << "Прямой обход: ";
    preorderTraversal(root);
    std::cout << std::endl;

    std::cout << "Центральный обход: ";
    inorderTraversal(root);
    std::cout << std::endl;

    std::cout << "Концевой обход: ";
    postorderTraversal(root);
    std::cout << std::endl;

    return 0;
}
