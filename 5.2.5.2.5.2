#include <SFML/Graphics.hpp>
#include <vector>
#include <cmath>
#include <string>
#include <iostream>
#include <cstdlib>
#include <ctime>
#define M_PI (3.14159265358979323846)

const int RADIUS = 300; // Радиус окружности для размещения вершин
const float VERTEX_RADIUS = 20.0f; // Радиус круга вершины
const int NUM_VERTICES = 6; // Количество вершин

sf::Color generateRandomColor() {
    std::srand(static_cast<unsigned int>(std::time(nullptr))); // Инициализация генератора случайных чисел
    return sf::Color(
        static_cast<sf::Uint8>(std::rand() % 256),
        static_cast<sf::Uint8>(std::rand() % 256),
        static_cast<sf::Uint8>(std::rand() % 256)
    );
}

sf::Color generateRandomColor2() {
    std::srand(static_cast<unsigned int>(std::time(nullptr))); // Инициализация генератора случайных чисел
    return sf::Color(
        static_cast<sf::Uint8>(std::rand() % 256 / 2 + std::rand() % 256 / 2),
        static_cast<sf::Uint8>(std::rand() % 256 / 2 + std::rand() % 256 / 2),
        static_cast<sf::Uint8>(std::rand() % 256 / 2 + std::rand() % 256 / 2)
    );
}

// Функция для отрисовки стрелки между двумя точками
void drawArrow(sf::RenderWindow& window, sf::Vector2f start, sf::Vector2f end, sf::Color color) {
    sf::Vector2f direction = end - start;
    float length = std::sqrt(direction.x * direction.x + direction.y * direction.y);
    direction /= length; // Норма

    float offset = VERTEX_RADIUS; // Смещение для стрелки
    start += direction * offset; // Сдвигаем начало линии
    end -= direction * offset;   // Сдвигаем конец линии

    // Линия
    sf::Vertex line[] = {
        sf::Vertex(start, color),
        sf::Vertex(end, color)
    };
    window.draw(line, 2, sf::Lines);

    // Стрелка (головка)
    float arrowSize = 15.0f; // Размер стрелки
    sf::Vector2f arrowP1 = end - direction * arrowSize + sf::Vector2f(-direction.y, direction.x) * (arrowSize / 3.0f);
    sf::Vector2f arrowP2 = end - direction * arrowSize + sf::Vector2f(direction.y, -direction.x) * (arrowSize / 3.0f);

    sf::ConvexShape arrowHead;
    arrowHead.setPointCount(3);
    arrowHead.setPoint(0, end);
    arrowHead.setPoint(1, arrowP1);
    arrowHead.setPoint(2, arrowP2);
    arrowHead.setFillColor(color);

    window.draw(arrowHead);
}

int main() {
    // Матрица смежности
    int adjacencyMatrix[NUM_VERTICES][NUM_VERTICES] = {
    {0, 1, 1, 0, 0, 0}, // Вершина 1 
    {0, 0, 0, 0, 1, 0}, // Вершина 2 
    {0, 0, 0, 1, 1, 0}, // Вершина 3 
    {0, 0, 0, 0, 0, 0}, // Вершина 4 
    {0, 0, 0, 0, 0, 1}, // Вершина 5 
    {1, 0, 0, 0, 1, 0}
    };

    // Окно SFML
    sf::RenderWindow window(sf::VideoMode(900, 700), "Graph");

    // Расчёт координат вершин
    std::vector<sf::Vector2f> verticesPositions;
    float angleStep = 2 * M_PI / NUM_VERTICES;
    for (int i = 0; i < NUM_VERTICES; ++i) {
        float angle = i * angleStep;
        float x = 800 / 2 + RADIUS * std::cos(angle);
        float y = 700 / 2 + RADIUS * std::sin(angle);
        verticesPositions.emplace_back(x, y);
    }

    // Шрифт
    sf::Font font;
    if (!font.loadFromFile("C:/Built/s/arial.ttf")) {
        std::cerr << "Error. Not found fonts: arial.ttf\n";
        return -1;
    }

    // Главный цикл
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        window.clear();

        // Отрисовка рёбер
        for (int i = 0; i < NUM_VERTICES; ++i) {
            for (int j = 0; j < NUM_VERTICES; ++j) {
                if (adjacencyMatrix[i][j] == 1) {
                    sf::Color edgeColor = generateRandomColor();
                    drawArrow(window, verticesPositions[i], verticesPositions[j], edgeColor);
                }
            }
        }

        // Отрисовка вершин
        for (int i = 0; i < NUM_VERTICES; ++i) {
            sf::CircleShape vertex(VERTEX_RADIUS);
            sf::Color VertexColor = generateRandomColor2();
            vertex.setFillColor(VertexColor);
            vertex.setOrigin(VERTEX_RADIUS, VERTEX_RADIUS);
            vertex.setPosition(verticesPositions[i]);
            window.draw(vertex);

            // Отрисовка номера вершины
            sf::Text text;
            text.setFont(font);
            text.setString(std::to_string(i + 1));
            text.setCharacterSize(20);
            text.setFillColor(sf::Color::Black);

            // Центрирование текста относительно круга вершины
            sf::FloatRect textBounds = text.getLocalBounds();
            text.setOrigin(textBounds.width / 2, textBounds.height / 2);
            text.setPosition(verticesPositions[i].x, verticesPositions[i].y - 5);

            window.draw(text);
        }

        window.display();
    }

    return 0;
}
