#include <SFML/Graphics.hpp>
#include <vector>
#include <cmath>
#include <iostream>

const float PI = 3.14159265358979323846;
const int NUM_VERTICES = 6; // Количество вершин
const float VERTEX_RADIUS = 50.0f; // Радиус круга вершины

class Graph {
private:
    std::vector<std::pair<int, int>> edges;
    int vertexCount;

public:
    Graph(int vertexCount) : vertexCount(vertexCount) {}

    void addEdge(int u, int v) {
        edges.emplace_back(u, v);
    }

    const std::vector<std::pair<int, int>>& getEdges() const {
        return edges;
    }

    int getVertexCount() const {
        return vertexCount;
    }
};

// Функция для отрисовки стрелки между двумя точками
void drawArrow(sf::RenderWindow& window, sf::Vector2f start, sf::Vector2f end) {
    sf::Vector2f direction = end - start;
    float length = std::sqrt(direction.x * direction.x + direction.y * direction.y);
    direction /= length; // Норма

    float offset = VERTEX_RADIUS; // Смещение для стрелки
    start += direction * offset; // Сдвигаем начало линии
    end -= direction * offset;   // Сдвигаем конец линии

    // Линия
    sf::Vertex line[] = {
        sf::Vertex(start, sf::Color(0, 150, 0)), 
        sf::Vertex(end, sf::Color(0, 255, 0))   
    };
    window.draw(line, 2, sf::Lines);

    // Стрелка (головка)
    float arrowSize = 15.0f; // Размер стрелки
    sf::Vector2f arrowP1 = end - direction * arrowSize + sf::Vector2f(-direction.y, direction.x) * (arrowSize / 3.0f);
    sf::Vector2f arrowP2 = end - direction * arrowSize + sf::Vector2f(direction.y, -direction.x) * (arrowSize / 3.0f);
    sf::Vector2f arrowP3 = end - direction * (arrowSize / 2.0f);
    sf::ConvexShape arrowHead;
    arrowHead.setPointCount(4);
    arrowHead.setPoint(0, end);
    arrowHead.setPoint(1, arrowP1);
    arrowHead.setPoint(2, arrowP3);
    arrowHead.setPoint(3, arrowP2);
    arrowHead.setFillColor(sf::Color(0, 200, 0));
    window.draw(arrowHead);
}

void visualizeGraph(const Graph& graph, sf::RenderWindow& window, sf::Font& font) {
    int vertexCount = graph.getVertexCount();
    const auto& edges = graph.getEdges();

    std::vector<sf::Vector2f> positions(vertexCount);
    float radius = 200.0f;
    sf::Vector2f center(400.0f, 300.0f);
    for (int i = 0; i < vertexCount; ++i) {
        float angle = 2 * PI * i / vertexCount;
        positions[i] = center + sf::Vector2f(std::cos(angle) * radius, std::sin(angle) * radius);
    }

    for (int i = 0; i < vertexCount; ++i) {
        sf::CircleShape vertex(VERTEX_RADIUS);
        vertex.setFillColor(sf::Color(0, 150, 0)); 
        vertex.setOrigin(VERTEX_RADIUS, VERTEX_RADIUS);
        vertex.setPosition(positions[i]);
        window.draw(vertex);

        // Отрисовка номера вершины
        sf::Text text;
        text.setFont(font);
        text.setString(std::to_string(i + 1));
        text.setCharacterSize(20);
        text.setFillColor(sf::Color::Black);

        // Центрирование текста относительно круга вершины
        sf::FloatRect textBounds = text.getLocalBounds();
        text.setOrigin(textBounds.width / 2, textBounds.height / 2);
        text.setPosition(positions[i].x, positions[i].y - 5);
        window.draw(text);
    }

    // Отрисовка стрелки
    for (const auto& edge : edges) {
        int u = edge.first - 1;
        int v = edge.second - 1;

        if (u < 0 || v < 0 || u >= vertexCount || v >= vertexCount) {
            std::cerr << "Invalid edge: " << edge.first << " -> " << edge.second << "\n";
            continue;
        }

        if (edge.first != edge.second) {
            drawArrow(window, positions[u], positions[v]);
        }
    }
}

int main() {
    Graph graph(NUM_VERTICES);
    graph.addEdge(1, 3);
    graph.addEdge(1, 2);
    graph.addEdge(2, 5);
    graph.addEdge(3, 4);
    graph.addEdge(3, 5);
    graph.addEdge(5, 6);
    graph.addEdge(6, 5);
    graph.addEdge(6, 1);

    sf::RenderWindow window(sf::VideoMode(800, 600), "Graph");

    sf::Font font;
    if (!font.loadFromFile("C:/Built/s/arial.ttf")) {
        std::cerr << "Failed to load font\n";
        return -1;
    }

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
        }

        window.clear();
        visualizeGraph(graph, window, font);
        window.display();
    }

    return 0;
}
