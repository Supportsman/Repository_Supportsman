#include <iostream>
#include <vector>
#include <list>
#include <string>
#include <fstream>
#include <functional>

using namespace std;

const int TABLE_SIZE = 10; // Размер хеш-таблицы

// Структура для хранения ключа и значения
struct HashNode {
    string key; // слово
    int value;  // Количество вхождений

    HashNode(const string& k, int v) : key(k), value(v) {}
};

// Класс для хеш-таблицы
class HashTable {
private:
    vector<list<HashNode>> table; // Хранение списка 

    // Хеш-функция для строк
    int hashFunction(const string& key) {
        hash<string> hashFn;
        return hashFn(key) % TABLE_SIZE;
    }

public:
    HashTable() : table(TABLE_SIZE) {}

    // Вставка или обновление значения в хеш-таблице
    void insert(const string& key) {
        int index = hashFunction(key);
        for (auto& node : table[index]) {
            if (node.key == key) {
                node.value++; // Увеличиваем счетчик существующего слова
                return;
            }
        }
        // Если слово не найдено, добавляем его
        table[index].emplace_back(key, 1);
    }

    // Запись содержимого хеш-таблицы в файл
    void writeToFile(const string& filename) const {
        ofstream outfile(filename);
        if (!outfile) {
            cerr << "Не удалось открыть файл для записи!" << endl;
            return;
        }

        // Записываем все индексы и слова
        for (int i = 0; i < TABLE_SIZE; ++i) {
            if (!table[i].empty()) { // Проверяем, что список не пуст
                outfile << "Index " << i << ":" << endl;
                for (const auto& node : table[i]) {
                    outfile << "  " << node.key << ": " << node.value << endl;
                }
                outfile << endl; // Для разделения индексов
            }
        }

        outfile.close();
    }
};

int main() {
    setlocale(LC_ALL, "RU");
    HashTable hashTable;

    // Открытие текстового файла
    ifstream file("text.txt");
    if (!file) {
        cerr << "Не удалось открыть файл!" << endl;
        return 1;
    }

    string word;
    while (file >> word) { // Читаем файл по словам
        // Приводим слово к нижнему регистру и удаляем неалфавитные символы
        string cleanedWord;
        for (char c : word) {
            if (isalpha(c) || c == '-') { // Разрешаем буквы и дефисы
                cleanedWord += tolower(c);
            }
        }
        if (!cleanedWord.empty()) {
            hashTable.insert(cleanedWord); // Вставляем очищенное слово 
        }
    }

    file.close(); // Закрываем файл

    // Выводим содержание хеш-таблицы в файл
    hashTable.writeToFile("output.txt");

    return 0;
}
